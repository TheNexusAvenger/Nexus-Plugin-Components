--Tests SelectionListEntry.
--!strict

local ReplicatedStorage = game:GetService("ReplicatedStorage")

local SelectionListEntry = require(ReplicatedStorage.NexusPluginComponents.List.SelectionListEntry)
local CreateFusionScope = require(ReplicatedStorage.NexusPluginComponents.CreateFusionScope)
local Fusion = require(ReplicatedStorage.NexusPluginComponents.Fusion)

return function()
    describe("A SelectionListEntry", function()
        local TestScope, TestSelectionListEntry = nil, nil
        beforeEach(function()
            TestScope = CreateFusionScope()
            TestSelectionListEntry = SelectionListEntry.new(TestScope, "Value")
            TestSelectionListEntry.Level:set(2)
        end)

        afterEach(function()
            TestSelectionListEntry:Destroy()
        end)

        it("should store the original data.", function()
            expect(Fusion.peek(TestSelectionListEntry.Data)).to.equal("Value")
        end)

        it("should set data.", function()
            TestSelectionListEntry:SetData("NewValue")
            expect(Fusion.peek(TestSelectionListEntry.Data)).to.equal("NewValue")
        end)

        it("should deselect when made unselectable.", function()
            TestSelectionListEntry.Selected:set(true)
            TestSelectionListEntry.Selectable:set(false)
            expect(Fusion.peek(TestSelectionListEntry.Selected)).to.equal(false)
        end)
		
        it("should add children.", function()
            local Child1 = SelectionListEntry.new(TestScope, "Value1")
            local Child2 = SelectionListEntry.new(TestScope, "Value2")
            TestSelectionListEntry:AddChild(Child1)
            TestSelectionListEntry:AddChild(Child2)
            
            local Children = Fusion.peek(TestSelectionListEntry.Children)
            expect(#Children).to.equal(2)
            expect(Children[1]).to.equal(Child1)
            expect(Children[2]).to.equal(Child2)
            expect(Fusion.peek(Child1.Parent)).to.equal(TestSelectionListEntry)
            expect(Fusion.peek(Child1.Level)).to.equal(3)
            expect(Fusion.peek(Child2.Parent)).to.equal(TestSelectionListEntry)
            expect(Fusion.peek(Child2.Level)).to.equal(3)
        end)

        it("should not add duplicate children.", function()
            local Child1 = SelectionListEntry.new(TestScope, "Value1")
            local Child2 = SelectionListEntry.new(TestScope, "Value2")
            TestSelectionListEntry:AddChild(Child1)
            TestSelectionListEntry:AddChild(Child2)
            TestSelectionListEntry:AddChild(Child1)
            
            local Children = Fusion.peek(TestSelectionListEntry.Children)
            expect(#Children).to.equal(2)
            expect(Children[1]).to.equal(Child1)
            expect(Children[2]).to.equal(Child2)
            expect(Fusion.peek(Child1.Parent)).to.equal(TestSelectionListEntry)
            expect(Fusion.peek(Child1.Level)).to.equal(3)
            expect(Fusion.peek(Child2.Parent)).to.equal(TestSelectionListEntry)
            expect(Fusion.peek(Child2.Level)).to.equal(3)
        end)

        it("should remove children.", function()
            local Child1 = SelectionListEntry.new(TestScope, "Value1")
            local Child2 = SelectionListEntry.new(TestScope, "Value2")
            TestSelectionListEntry:AddChild(Child1)
            TestSelectionListEntry:AddChild(Child2)
            TestSelectionListEntry:RemoveChild(Child1)
            
            local Children = Fusion.peek(TestSelectionListEntry.Children)
            expect(#Children).to.equal(1)
            expect(Children[1]).to.equal(Child2)
            expect(Fusion.peek(Child1.Parent)).to.equal(nil)
            expect(Fusion.peek(Child1.Level)).to.equal(0)
            expect(Fusion.peek(Child2.Parent)).to.equal(TestSelectionListEntry)
            expect(Fusion.peek(Child2.Level)).to.equal(3)
        end)

        it("should move children.", function()
            local Child1 = SelectionListEntry.new(TestScope, "Value1")
            local Child2 = SelectionListEntry.new(TestScope, "Value2")
            TestSelectionListEntry:AddChild(Child1)
            TestSelectionListEntry:AddChild(Child2)
            Child1:AddChild(Child2)
            
            local Children = Fusion.peek(TestSelectionListEntry.Children)
            expect(#Children).to.equal(1)
            expect(Children[1]).to.equal(Child1)
            expect(Fusion.peek(Child1.Parent)).to.equal(TestSelectionListEntry)
            expect(Fusion.peek(Child1.Level)).to.equal(3)
            expect(Fusion.peek(Child2.Parent)).to.equal(Child1)
            expect(Fusion.peek(Child2.Level)).to.equal(4)
        end)

        it("should not remove unknown children remove children.", function()
            local Child1 = SelectionListEntry.new(TestScope, "Value1")
            local Child2 = SelectionListEntry.new(TestScope, "Value2")
            TestSelectionListEntry:AddChild(Child1)
            TestSelectionListEntry:AddChild(Child2)
            TestSelectionListEntry:RemoveChild(SelectionListEntry.new(TestScope, "Value3"))
            
            local Children = Fusion.peek(TestSelectionListEntry.Children)
            expect(#Children).to.equal(2)
            expect(Children[1]).to.equal(Child1)
            expect(Children[2]).to.equal(Child2)
            expect(Fusion.peek(Child1.Parent)).to.equal(TestSelectionListEntry)
            expect(Fusion.peek(Child1.Level)).to.equal(3)
            expect(Fusion.peek(Child2.Parent)).to.equal(TestSelectionListEntry)
            expect(Fusion.peek(Child2.Level)).to.equal(3)
        end)

        it("should store all descendants.", function()
            local Child1 = SelectionListEntry.new(TestScope, "Value1")
            local Child2 = SelectionListEntry.new(TestScope, "Value2")
            local Child3 = SelectionListEntry.new(TestScope, "Value3")
            TestSelectionListEntry:AddChild(Child1)
            TestSelectionListEntry:AddChild(Child2)
            Child1:AddChild(Child3)
        
            local Descendants = Fusion.peek(TestSelectionListEntry.Descendants)
            expect(#Descendants).to.equal(4)
            expect(Descendants[1]).to.equal(TestSelectionListEntry)
            expect(Descendants[2]).to.equal(Child1)
            expect(Descendants[3]).to.equal(Child3)
            expect(Descendants[4]).to.equal(Child2)
        end)

        it("should sort children.", function()
            local Child1 = SelectionListEntry.new(TestScope, "Value1", function(a, b)
                return Fusion.peek(a.Data) < Fusion.peek(b.Data)
            end)
            local Child2 = SelectionListEntry.new(TestScope, "Value2")
            local Child3 = SelectionListEntry.new(TestScope, "Value3")
            local Child4 = SelectionListEntry.new(TestScope, "Value4")
            TestSelectionListEntry:AddChild(Child1)
            Child1:AddChild(Child4)
            Child1:AddChild(Child3)
            Child1:AddChild(Child2)
        
            local Descendants = Fusion.peek(TestSelectionListEntry.Descendants)
            expect(#Descendants).to.equal(5)
            expect(Descendants[1]).to.equal(TestSelectionListEntry)
            expect(Descendants[2]).to.equal(Child1)
            expect(Descendants[3]).to.equal(Child2)
            expect(Descendants[4]).to.equal(Child3)
            expect(Descendants[5]).to.equal(Child4)
        end)

        it("should show all descendants.", function()
            local Child1 = SelectionListEntry.new(TestScope, "Value1")
            local Child2 = SelectionListEntry.new(TestScope, "Value2")
            local Child3 = SelectionListEntry.new(TestScope, "Value3")
            TestSelectionListEntry:AddChild(Child1)
            TestSelectionListEntry:AddChild(Child2)
            Child1:AddChild(Child3)
        
            local VisibleEntries = Fusion.peek(TestSelectionListEntry.VisibleEntries)
            expect(#VisibleEntries).to.equal(4)
            expect(VisibleEntries[1]).to.equal(TestSelectionListEntry)
            expect(VisibleEntries[2]).to.equal(Child1)
            expect(VisibleEntries[3]).to.equal(Child3)
            expect(VisibleEntries[4]).to.equal(Child2)
        end)

        it("should not show unexpanded children.", function()
            local Child1 = SelectionListEntry.new(TestScope, "Value1")
            local Child2 = SelectionListEntry.new(TestScope, "Value2")
            local Child3 = SelectionListEntry.new(TestScope, "Value3")
            TestSelectionListEntry:AddChild(Child1)
            TestSelectionListEntry:AddChild(Child2)
            Child1:AddChild(Child3)
            Child1.Expanded:set(false)
        
            local VisibleEntries = Fusion.peek(TestSelectionListEntry.VisibleEntries)
            expect(#VisibleEntries).to.equal(3)
            expect(VisibleEntries[1]).to.equal(TestSelectionListEntry)
            expect(VisibleEntries[2]).to.equal(Child1)
            expect(VisibleEntries[3]).to.equal(Child2)
        end)

        it("should not show invisible children.", function()
            local Child1 = SelectionListEntry.new(TestScope, "Value1")
            local Child2 = SelectionListEntry.new(TestScope, "Value2")
            local Child3 = SelectionListEntry.new(TestScope, "Value3")
            TestSelectionListEntry:AddChild(Child1)
            TestSelectionListEntry:AddChild(Child2)
            Child1:AddChild(Child3)
            Child1.Visible:set(false)
        
            local VisibleEntries = Fusion.peek(TestSelectionListEntry.VisibleEntries)
            expect(#VisibleEntries).to.equal(2)
            expect(VisibleEntries[1]).to.equal(TestSelectionListEntry)
            expect(VisibleEntries[2]).to.equal(Child2)
        end)

        it("should show any children when not expanded.", function()
            local Child1 = SelectionListEntry.new(TestScope, "Value1")
            local Child2 = SelectionListEntry.new(TestScope, "Value2")
            local Child3 = SelectionListEntry.new(TestScope, "Value3")
            TestSelectionListEntry:AddChild(Child1)
            TestSelectionListEntry:AddChild(Child2)
            Child1:AddChild(Child3)
            TestSelectionListEntry.Expanded:set(false)
        
            local VisibleEntries = Fusion.peek(TestSelectionListEntry.VisibleEntries)
            expect(#VisibleEntries).to.equal(1)
            expect(VisibleEntries[1]).to.equal(TestSelectionListEntry)
        end)

        it("should destroy children.", function()
            local Child1 = SelectionListEntry.new(TestScope, "Value1")
            local Child2 = SelectionListEntry.new(TestScope, "Value2")
            TestSelectionListEntry:AddChild(Child1)
            TestSelectionListEntry:AddChild(Child2)
            Child1:Destroy()
            
            local Children = Fusion.peek(TestSelectionListEntry.Children)
            expect(#Children).to.equal(1)
            expect(Children[1]).to.equal(Child2)
            expect(Fusion.peek(Child1.Parent)).to.equal(nil)
            expect(Fusion.peek(Child1.Level)).to.equal(0)
            expect(Fusion.peek(Child2.Parent)).to.equal(TestSelectionListEntry)
            expect(Fusion.peek(Child2.Level)).to.equal(3)
        end)

        it("should destroy recursively.", function()
            local Child1 = SelectionListEntry.new(TestScope, "Value1")
            local Child2 = SelectionListEntry.new(TestScope, "Value2")
            TestSelectionListEntry:AddChild(Child1)
            TestSelectionListEntry:AddChild(Child2)
            TestSelectionListEntry:Destroy()
            
            local Children = Fusion.peek(TestSelectionListEntry.Children)
            expect(#Children).to.equal(0)
            expect(Fusion.peek(Child1.Parent)).to.equal(nil)
            expect(Fusion.peek(Child1.Level)).to.equal(0)
            expect(Fusion.peek(Child2.Parent)).to.equal(nil)
            expect(Fusion.peek(Child2.Level)).to.equal(0)
        end)

        it("should toggle the selection.", function()
            TestSelectionListEntry:ToggleSelection()
            expect(Fusion.peek(TestSelectionListEntry.Selected)).to.equal(true)
        end)

        it("should not toggle the selection if it isn't selectable.", function()
            TestSelectionListEntry.Selectable:set(false)
            TestSelectionListEntry:ToggleSelection()
            expect(Fusion.peek(TestSelectionListEntry.Selected)).to.equal(false)
        end)

        it("should replace the selection if no key is down.", function()
            local Child1 = SelectionListEntry.new(TestScope, "Value1")
            local Child2 = SelectionListEntry.new(TestScope, "Value2")
            local Child3 = SelectionListEntry.new(TestScope, "Value3")
            TestSelectionListEntry:AddChild(Child1)
            TestSelectionListEntry:AddChild(Child2)
            Child1:AddChild(Child3)
            Child1:ToggleSelection()
            Child3:ToggleSelection()
        
            expect(Fusion.peek(Child1.Selected)).to.equal(false)
            expect(Fusion.peek(Child3.Selected)).to.equal(true)
        end)

        it("should add the selection if control is down.", function()
            local Child1 = SelectionListEntry.new(TestScope, "Value1")
            local Child2 = SelectionListEntry.new(TestScope, "Value2")
            local Child3 = SelectionListEntry.new(TestScope, "Value3")
            TestSelectionListEntry:AddChild(Child1)
            TestSelectionListEntry:AddChild(Child2)
            Child1:AddChild(Child3)
            Child1:ToggleSelection()
            Child3:ToggleSelection(true, false)
        
            expect(Fusion.peek(Child1.Selected)).to.equal(true)
            expect(Fusion.peek(Child3.Selected)).to.equal(true)
        end)

        it("should add the selection if shift is down.", function()
            local Child1 = SelectionListEntry.new(TestScope, "Value1")
            local Child2 = SelectionListEntry.new(TestScope, "Value2")
            local Child3 = SelectionListEntry.new(TestScope, "Value3")
            local Child4 = SelectionListEntry.new(TestScope, "Value4")
            local Child5 = SelectionListEntry.new(TestScope, "Value5")
            TestSelectionListEntry:AddChild(Child1)
            TestSelectionListEntry:AddChild(Child2)
            TestSelectionListEntry:AddChild(Child3)
            TestSelectionListEntry:AddChild(Child4)
            TestSelectionListEntry:AddChild(Child5)
            Child3:ToggleSelection()
            Child1:ToggleSelection(false, true)
        
            expect(Fusion.peek(Child1.Selected)).to.equal(true)
            expect(Fusion.peek(Child2.Selected)).to.equal(true)
            expect(Fusion.peek(Child3.Selected)).to.equal(true)
            expect(Fusion.peek(Child4.Selected)).to.equal(false)
            expect(Fusion.peek(Child5.Selected)).to.equal(false)
        end)
    end)
end